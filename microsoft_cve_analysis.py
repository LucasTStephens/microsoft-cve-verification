import os
import json

# dict for all microsoft CVEs
cves = {}

def check_cve(file_path):
    with open(file_path, 'r') as file:
        cve_data = json.load(file)

    # Get the required data parts
    cve_id = cve_data.get('cveMetadata', {}).get('cveId')
    cve_title = cve_data.get('containers', {}).get('cna', {}).get('title')
    publish_date = cve_data.get('cveMetadata', {}).get('datePublished')
    cna_provider = cve_data.get('containers', {}).get('cna', {}).get('providerMetadata', {}).get('shortName')
    cwe_id = None
    if cve_data.get('containers', {}).get('cna', {}).get('problemTypes'):
        cwe_id = cve_data.get('containers', {}).get('cna', {}).get('problemTypes')[0].get('descriptions')[0].get('cweId')
    cvss_score = None
    if cve_data.get('containers', {}).get('cna', {}).get('metrics'):
        cvss_score = cve_data.get('containers', {}).get('cna', {}).get('metrics')[0].get('cvssV3_1', {}).get('baseScore')
    cpe_list = []
    if cve_data.get('containers', {}).get('cna', {}).get('affected'):
        for product in cve_data.get('containers', {}).get('cna', {}).get('affected'):
            if product.get('cpes'):
                cpe_list.extend(product.get('cpes'))

    # Only count CVEs published by microsoft
    if cna_provider == 'microsoft':
        cve_info = {
            "CVE ID": cve_id,
            "Title": cve_title,
            "Publish Date": publish_date,
            "CPE": cpe_list,
            "CVSS": cvss_score,
            "CNA Provider": cna_provider,
            "CWE ID": cwe_id
        }
        microsoft_cves[cve_id] = cve_info
        
        # if CVE is incomplete add it to the additional dict
        if not (cve_id and cve_title and publish_date and cpe_list and cvss_score and cna_provider and cwe_id):
            incomplete_microsoft_cves[cve_id] = cve_info

if __name__ == "__main__":
    # Specify source directory
    src_dir = "./CVElist"

    for dirpath, dirnames, filenames in os.walk(src_dir):
        for filename in filenames:
            src_filepath = os.path.join(dirpath, filename)
            check_cve(src_filepath)

    # Output the results for testing purposes
    with open("microsoftcves", 'w') as file:
        print("Complete Microsoft CVEs:")
        print(json.dumps(microsoft_cves, indent=4))
        file.write(json.dumps(microsoft_cves, indent=4))

        print("\nIncomplete Microsoft CVEs:")
        print(json.dumps(incomplete_microsoft_cves, indent=4))

