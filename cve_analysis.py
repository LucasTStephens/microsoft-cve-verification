import os
import json
import pandas as pd
from datetime import datetime

class CNA:
    def __init__(self, name, join_date=None):
        self.name = name
        self.join_date = join_date
        self.total = 0
        self.cwe_id = 0
        self.cvss = 0
        self.cvss_v4_0 = 0
        self.cpe = 0
        self.total_before = 0
        self.total_after = 0
        self.CVSS_CWE_complete = 0
        self.CVSS_CWE_complete_before = 0
        self.CVSS_CWE_complete_after = 0
        self.CVSS_CWE_percent_complete_before = 0
        self.CVSS_CWE_percent_complete_after = 0
        self.CVSS_CWE_CPE_complete = 0
        self.CVSS_CWE_CPE_complete_before = 0
        self.CVSS_CWE_CPE_complete_after = 0
        self.CVSS_CWE_CPE_percent_complete_before = 0
        self.CVSS_CWE_CPE_percent_complete_after = 0

    def calculate_percentages(self):
        self.CVSS_CWE_percent_complete_before = (self.CVSS_CWE_complete_before / self.total_before) * 100 if self.total_before > 0 else 0
        self.CVSS_CWE_percent_complete_after = (self.CVSS_CWE_complete_after / self.total_after) * 100 if self.total_after > 0 else 0
        self.CVSS_CWE_CPE_percent_complete_before = (self.CVSS_CWE_CPE_complete_before / self.total_before) * 100 if self.total_before > 0 else 0
        self.CVSS_CWE_CPE_percent_complete_after = (self.CVSS_CWE_CPE_complete_before / self.total_before) * 100 if self.total_before > 0 else 0

def read_cna_file(file_path):
    cna_dict = {}
    with open(file_path, 'r') as file:
        lines = file.readlines()
        for line in lines:
            if line.strip():
                name, date = line.split(':')
                date = date.strip().rstrip(',')  # Remove any trailing comma
                name = name.lower()              # Make name standardized to lowercase
                cna_dict[name.strip()] = datetime.strptime(date, "%m/%d/%Y")
    return cna_dict

def parse_date(date_str):
    # Handle date strings with time components
    if 'T' in date_str:
        dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        return dt.replace(tzinfo=None)  # Make it offset-naive
    return datetime.strptime(date_str, "%Y-%m-%d")

def check_cve(file_path, cna_dict):
    with open(file_path, 'r') as file:
        cve_data = json.load(file)

    # Get the required data parts
    cna_provider = cve_data.get('containers', {}).get('cna', {}).get('providerMetadata', {}).get('shortName')
    cna_provider = str(cna_provider).lower()
    if cna_provider not in cna_dict:
        cna_dict[cna_provider] = CNA(cna_provider)

    cna = cna_dict[cna_provider]

    cwe_id = None
    if cve_data.get('containers', {}).get('cna', {}).get('problemTypes'):
        cwe_id = cve_data.get('containers', {}).get('cna', {}).get('problemTypes')[0].get('descriptions')[0].get('cweId')
    cvss_score = None
    cvss_version = None
    if cve_data.get('containers', {}).get('cna', {}).get('metrics'):
        metrics = cve_data.get('containers', {}).get('cna', {}).get('metrics')[0]
        cvss_score = metrics.get('cvssV3_1', {}).get('baseScore') or metrics.get('cvssV4_0', {}).get('baseScore')
        if 'cvssV4_0' in metrics:
            cvss_version = 'cvssV4_0'
    cpe_list = []
    if cve_data.get('containers', {}).get('cna', {}).get('affected'):
        for product in cve_data.get('containers', {}).get('cna', {}).get('affected'):
            if product.get('cpes'):
                cpe_list.extend(product.get('cpes'))

    publish_date_str = cve_data.get('cveMetadata', {}).get('datePublished', '1900-01-01')
    publish_date = parse_date(publish_date_str)

    # Overall metrics
    cna.total += 1
    if len(cpe_list) != 0:
        cna.cpe += 1
    if cvss_score:
        cna.cvss += 1
        if cvss_version == 'cvssV4_0':
            cna.cvss_v4_0 += 1
    if cwe_id:
        cna.cwe_id += 1

    # Check if the CVE is complete or incomplete
    is_complete = (
        cvss_score and cwe_id
    )
    if is_complete:
        cna.CVSS_CWE_complete += 1

    is_cpe_complete = (
        cvss_score and cwe_id and cpe_list
    )
    if is_cpe_complete:
        cna.CVSS_CWE_CPE_complete += 1

    # If the CNA has a join date, calculate metrics before and after join date
    if cna.join_date:
        if publish_date < cna.join_date:
            cna.total_before += 1
            if is_complete:
                cna.CVSS_CWE_complete_before += 1
            if is_cpe_complete:
                cna.CVSS_CWE_CPE_complete_before += 1
        else:
            cna.total_after += 1
            if is_complete:
                cna.CVSS_CWE_complete_after += 1
            if is_cpe_complete:
                cna.CVSS_CWE_CPE_complete_after += 1

if __name__ == "__main__":
    # Read the CNA file
    cna_file_path = "dates.txt"  # Replace with the path to your CNA file
    join_dates = read_cna_file(cna_file_path)

    # Initialize CNA dictionary with join dates
    cna_dict = {name: CNA(name, date) for name, date in join_dates.items()}

    # Specify source directory
    src_dir = "./CVElist"

    for dirpath, dirnames, filenames in os.walk(src_dir):
        for filename in filenames:
            if filename == ".DS_Store":
                continue
            src_filepath = os.path.join(dirpath, filename)
            check_cve(src_filepath, cna_dict)

    # Calculate percentages and save to Excel
    for cna in cna_dict.values():
        cna.calculate_percentages()

    # Create a DataFrame and save to Excel
    df = pd.DataFrame([vars(cna) for cna in cna_dict.values()])
    df.to_excel("cna_metrics.xlsx", index=False)
